


- name: settings for muc (jibri jigasi)
  blockinfile:
    path: /etc/prosody/conf.d/{{ meet_domain }}.cfg.lua
    marker: "-- {mark} ANSIBLE MANAGED BLOCK for muc (jibri jigasi)"
    block: |
      muc_room_cache_size = 1000
    insertafter: '^Component "internal.auth..*'
    state: present
  notify:
    - restart prosody

# TODO whitelist recorder in lobby when lobby is active


- name: settings for recorder
  blockinfile:
    path: /etc/prosody/conf.d/{{ meet_domain }}.cfg.lua
    marker: "-- {mark} ANSIBLE MANAGED BLOCK for recorder (jibri)"
    block: |

      VirtualHost "recorder.{{ meet_domain }}"
      modules_enabled = {
          "ping";
      }
      authentication = "internal_plain"
    insertbefore: '^-- internal muc component'
    state: present
  notify:
    - restart prosody


- name: Register jibri user with Prosody service.
  command: >
    prosodyctl register jibri auth.{{ meet_domain }} {{ meet_jibri_password }}
  args:
    creates: /var/lib/prosody/{{ 'auth%2e'+meet_domain | replace('.', '%2e') | replace('-', '%2d') }}/accounts/jibri.dat
  notify:
    - restart prosody

- name: Register recorder user with Prosody service.
  command: >
    prosodyctl register recorder recorder.{{ meet_domain }} {{ meet_recorder_password }}
  args:
    creates: /var/lib/prosody/{{ 'recorder%2e'+meet_domain | replace('.', '%2e') | replace('-', '%2d') }}/accounts/recorder.dat
  notify:
    - restart prosody




- name: prosody user for jibri
  command: prosodyctl register jibri auth.{{ meet_domain }} {{ meet_jibri_password }}
  changed_when: False
- name: prosody user for recorder
  command: prosodyctl register recorder recorder.{{ meet_domain }} {{ meet_recorder_password }}
  changed_when: False



- name: configure jibri in jicofo
  lineinfile:
    path: /etc/jitsi/jicofo/sip-communicator.properties
    regexp: '^org.jitsi.jicofo.jibri.BREWERY='
    insertbefore: EOF
    line: org.jitsi.jicofo.jibri.BREWERY=JibriBrewery@internal.auth.{{ meet_domain }}
    state: present
  notify:
    - restart jicofo


- name: configure jibri in jicofo (2)
  lineinfile:
    path: /etc/jitsi/jicofo/sip-communicator.properties
    regexp: '^org.jitsi.jicofo.jibri.PENDING_TIMEOUT='
    insertbefore: EOF
    line: org.jitsi.jicofo.jibri.PENDING_TIMEOUT=90
    state: present
  notify:
    - restart jicofo


# TODO
- name: enable file recodings
  lineinfile:
    path: /etc/jitsi/meet/{{ meet_domain }}-config.js
    regexp: '^[ ]*fileRecordingsEnabled: '
    insertafter: '^[ ]*// fileRecordingsEnabled: '
    line: '    fileRecordingsEnabled: true,'

- name: enable live streaming
  lineinfile:
    path: /etc/jitsi/meet/{{ meet_domain }}-config.js
    regexp: '^[ ]*liveStreamingEnabled: '
    insertafter: '^[ ]*// liveStreamingEnabled: '
    line: '    liveStreamingEnabled: true,'

- name: hidden domain for recorder domain
  lineinfile:
    path: /etc/jitsi/meet/{{ meet_domain }}-config.js
    regexp: '^[ ]*hiddenDomain: '
    insertbefore: '^[ ]*// prevent fear when commenting out the last value'
    line: "    hiddenDomain: 'recorder.{{ meet_domain }}',"


- name: enable file recodings
  lineinfile:
    path: /etc/jitsi/meet/{{ meet_domain }}-config.js
    regexp: '^[ ]*fileRecordingsEnabled: '
    insertafter: '^[ ]*// fileRecordingsEnabled: '
    line: '    fileRecordingsEnabled: false,'
  when: meet_record_any

- name: enable live streaming
  lineinfile:
    path: /etc/jitsi/meet/{{ meet_domain }}-config.js
    regexp: '^[ ]*liveStreamingEnabled: '
    insertafter: '^[ ]*// liveStreamingEnabled: '
    line: '    liveStreamingEnabled: true,'


- name: hidden domain for recorder domain
  lineinfile:
    path: /etc/jitsi/meet/{{ meet_domain }}-config.js
    regexp: '^[ ]*hiddenDomain: '
    insertbefore: '^[ ]*// prevent fear when commenting out the last value'
    line: "    hiddenDomain: 'recorder.{{ meet_domain }}',"


# port 52222